# 워크플로우 이름 정의
name: Infra

# 워크플로우가 실행될 이벤트를 정의
on:
  workflow_dispatch:

# 워크플로우가 실행될 job을 정의
jobs:
  # job 이름 정의
  infra:
    # job이 실행될 runner를 정의
    runs-on: ubuntu-latest

    # 작업 단계
    steps:
      # 작업 단계 이름 정의
      - name: Checkout source code
        # repository의 코드를 가져오기 위한 checkout action
        uses: actions/checkout@master

      - uses: actions/setup-node@v2
        # action에 node version 전달
        with:
          node-version: "20.9.0"

        # node modules 캐싱
      - name: Cache node modules
        id: node-cache
        # 캐싱하기 위한 action
        uses: actions/cache@v1
        with:
          path: node_modules
          # 캐시를 저장할 때 생성되는 키로, 캐싱된 데이터를 찾을 때 사용한다.
          # key가 동일하면 캐싱된 파일을 사용하고, key가 변경되면 다시 install한다.
          # yarn-lock.json을 hashing한 값으로 설정된다.
          key: ${{ runner.OS }}-master-build-${{ hashFiles('**/yarn.lock') }}
          # key를 찾지 못할 경우 restore-key에 매칭되는 다른 유형의 key를 찾아 사용한다.
          restore-keys: |
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-

      - name: Install Dependencies
        # key가 같지 않을 때 install
        if: steps.node-cache.outputs.cache-hit != 'true'
        # shell 명령 실행
        run: yarn

      - name: Build
        run: yarn build:dev

      # - name: Deploy
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     AWS_BUCKET_NAME: ${{ secrets.AWS_STAGING_BUCKET_NAME }}
      #     AWS_REGION: ${{ secrets.AWS_REGION }}
      #   run: aws s3 sync dist s3://${{secrets.AWS_STAGING_BUCKET_NAME}} --delete

      # # 클라우드 프론트 캐시 초기화
      # - name: Invalidate CloudFront Cache
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     AWS_REGION: ${{ secrets.AWS_REGION }}
      #   run: aws cloudfront create-invalidation --distribution-id ${{secrets.DEV_DISTRIBUTION_ID}} --paths "/*"
